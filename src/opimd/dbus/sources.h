/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freesmartphone_PIM_Sources
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freesmartphone_PIM_Sources

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freesmartphone_PIM_Sources_init_all_entries (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "InitAllEntries", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freesmartphone_PIM_Sources_init_all_entries_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freesmartphone_PIM_Sources_init_all_entries_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freesmartphone_PIM_Sources_init_all_entries_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freesmartphone_PIM_Sources_init_all_entries_async (DBusGProxy *proxy, org_freesmartphone_PIM_Sources_init_all_entries_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "InitAllEntries", org_freesmartphone_PIM_Sources_init_all_entries_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freesmartphone_PIM_Sources_get_entry_count (DBusGProxy *proxy, gint* OUT_entry_count, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetEntryCount", error, G_TYPE_INVALID, G_TYPE_INT, OUT_entry_count, G_TYPE_INVALID);
}

typedef void (*org_freesmartphone_PIM_Sources_get_entry_count_reply) (DBusGProxy *proxy, gint OUT_entry_count, GError *error, gpointer userdata);

static void
org_freesmartphone_PIM_Sources_get_entry_count_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_entry_count;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_entry_count, G_TYPE_INVALID);
  (*(org_freesmartphone_PIM_Sources_get_entry_count_reply)data->cb) (proxy, OUT_entry_count, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freesmartphone_PIM_Sources_get_entry_count_async (DBusGProxy *proxy, org_freesmartphone_PIM_Sources_get_entry_count_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetEntryCount", org_freesmartphone_PIM_Sources_get_entry_count_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freesmartphone_PIM_Sources */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freesmartphone_PIM_Source
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freesmartphone_PIM_Source

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freesmartphone_PIM_Source_get_name (DBusGProxy *proxy, char ** OUT_source_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetName", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_source_name, G_TYPE_INVALID);
}

typedef void (*org_freesmartphone_PIM_Source_get_name_reply) (DBusGProxy *proxy, char * OUT_source_name, GError *error, gpointer userdata);

static void
org_freesmartphone_PIM_Source_get_name_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_source_name;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_source_name, G_TYPE_INVALID);
  (*(org_freesmartphone_PIM_Source_get_name_reply)data->cb) (proxy, OUT_source_name, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freesmartphone_PIM_Source_get_name_async (DBusGProxy *proxy, org_freesmartphone_PIM_Source_get_name_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetName", org_freesmartphone_PIM_Source_get_name_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freesmartphone_PIM_Source_get_status (DBusGProxy *proxy, char ** OUT_source_status, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetStatus", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_source_status, G_TYPE_INVALID);
}

typedef void (*org_freesmartphone_PIM_Source_get_status_reply) (DBusGProxy *proxy, char * OUT_source_status, GError *error, gpointer userdata);

static void
org_freesmartphone_PIM_Source_get_status_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_source_status;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_source_status, G_TYPE_INVALID);
  (*(org_freesmartphone_PIM_Source_get_status_reply)data->cb) (proxy, OUT_source_status, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freesmartphone_PIM_Source_get_status_async (DBusGProxy *proxy, org_freesmartphone_PIM_Source_get_status_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetStatus", org_freesmartphone_PIM_Source_get_status_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freesmartphone_PIM_Source_get_supported_pi_mdomains (DBusGProxy *proxy, GHashTable** OUT_domains, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetSupportedPIMDomains", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_domains, G_TYPE_INVALID);
}

typedef void (*org_freesmartphone_PIM_Source_get_supported_pi_mdomains_reply) (DBusGProxy *proxy, GHashTable *OUT_domains, GError *error, gpointer userdata);

static void
org_freesmartphone_PIM_Source_get_supported_pi_mdomains_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_domains;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_domains, G_TYPE_INVALID);
  (*(org_freesmartphone_PIM_Source_get_supported_pi_mdomains_reply)data->cb) (proxy, OUT_domains, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freesmartphone_PIM_Source_get_supported_pi_mdomains_async (DBusGProxy *proxy, org_freesmartphone_PIM_Source_get_supported_pi_mdomains_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetSupportedPIMDomains", org_freesmartphone_PIM_Source_get_supported_pi_mdomains_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freesmartphone_PIM_Source */

G_END_DECLS
